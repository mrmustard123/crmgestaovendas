PROBLEMA: 
he hecho hacer una base de datos con charset utf8mb4 en Navicat 10.1.7 y al quere hacer un foreign key a una tabla con llave primaria tinyint(4) me da el siguiente error:
"1071 - Specified key was too long; max key lenght is 767 bytes"
Aquí te paso el DDL de ambas tablas:
CREATE TABLE user (
  user_id int(11) NOT NULL AUTO_INCREMENT,
  username varchar(255) NOT NULL,
  password varchar(255) NOT NULL,
  created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  updated_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  fk_users_group tinyint(4) DEFAULT NULL,
  PRIMARY KEY (user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE users_group (
  user_group_id tinyint(4) NOT NULL AUTO_INCREMENT,
  group_name varchar(255) NOT NULL,
  PRIMARY KEY (user_group_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;


SOLUCIÓN: 
El error que estás viendo es bastante común cuando se trabaja con MySQL 5.6 y charset utf8mb4.
El problema principal está en que MySQL 5.6 tiene una limitación de 767 bytes para las claves de índices cuando se usa el formato de fila por defecto (COMPACT/REDUNDANT). Con utf8mb4, cada carácter puede ocupar hasta 4 bytes, entonces:
    • Tu campo varchar(255) puede ocupar hasta 255 × 4 = 1020 bytes 
    • Esto excede los 767 bytes permitidos 
Soluciones que podés probar:
    1. Reducir el tamaño del varchar: 
sql
ALTER TABLE `users_group` MODIFY `group_name` varchar(191) NOT NULL;
(191 × 4 = 764 bytes, que está dentro del límite)
    2. Usar un prefijo de índice para el campo group_name: 
sql
CREATE INDEX idx_group_name ON users_group (group_name(191));
    3. Cambiar el formato de fila a DYNAMIC (recomendado): 
sql
ALTER TABLE `user` ROW_FORMAT=DYNAMIC;
ALTER TABLE `users_group` ROW_FORMAT=DYNAMIC;
    4. O mejor aún, recrear las tablas con ROW_FORMAT=DYNAMIC desde el inicio: 
sql
DROP TABLE IF EXISTS `user`;
DROP TABLE IF EXISTS `users_group`;

CREATE TABLE `users_group` (
  `user_group_id` tinyint(4) NOT NULL AUTO_INCREMENT,
  `group_name` varchar(255) NOT NULL,
  PRIMARY KEY (`user_group_id`),
  KEY `idx_group_name` (`group_name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

CREATE TABLE `user` (
  `user_id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(255) NOT NULL,
  `password` varchar(255) NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `updated_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `fk_users_group` tinyint(4) DEFAULT NULL,
  PRIMARY KEY (`user_id`),
  KEY `fk_user_group` (`fk_users_group`),
  CONSTRAINT `fk_user_group` FOREIGN KEY (`fk_users_group`) REFERENCES `users_group` (`user_group_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;
La opción 4 es la que más te recomiendo porque el ROW_FORMAT=DYNAMIC te va a permitir usar índices más largos y es más eficiente en general.